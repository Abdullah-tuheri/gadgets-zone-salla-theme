{# Product Listing Page for Gadgets Zone Theme #}

{% extends "layouts.master" %}

{% block title %}
    {% if category %}
        {{ category.name }} - {{ store.name }}
    {% else %}
        {{ trans('common.all_products') }} - {{ store.name }}
    {% endif %}
{% endblock %}

{% block description %}
    {% if category %}
        {{ category.description|default(trans('category.browse_products', {'name': category.name})) }}
    {% else %}
        {{ trans('product.all_products_description') }}
    {% endif %}
{% endblock %}

{% block body_class %}products-listing{% endblock %}

{% block content %}

{# Page Header #}
<section class="page-header">
    <div class="container">
        {# Breadcrumbs #}
        <nav class="breadcrumbs" aria-label="Breadcrumb">
            <ol class="breadcrumb-list">
                <li class="breadcrumb-item">
                    <a href="{{ store.url }}">{{ trans('common.home') }}</a>
                </li>
                {% if category %}
                    {% if category.parent %}
                        <li class="breadcrumb-item">
                            <a href="{{ category.parent.url }}">{{ category.parent.name }}</a>
                        </li>
                    {% endif %}
                    <li class="breadcrumb-item active" aria-current="page">
                        {{ category.name }}
                    </li>
                {% else %}
                    <li class="breadcrumb-item active" aria-current="page">
                        {{ trans('common.all_products') }}
                    </li>
                {% endif %}
            </ol>
        </nav>
        
        {# Page Title and Description #}
        <div class="page-header-content">
            <h1 class="page-title">
                {% if category %}
                    {{ category.name }}
                {% else %}
                    {{ trans('common.all_products') }}
                {% endif %}
            </h1>
            
            {% if category and category.description %}
                <p class="page-description">{{ category.description }}</p>
            {% endif %}
            
            {# Products Count #}
            <div class="products-count">
                <span class="count-text">
                    {{ products.total }} {{ trans('common.products_found') }}
                </span>
            </div>
        </div>
    </div>
</section>

{# Products Section #}
<section class="products-section">
    <div class="container">
        <div class="products-layout">
            {# Sidebar Filters #}
            <aside class="products-sidebar">
                <div class="sidebar-header">
                    <h3 class="sidebar-title">{{ trans('product.filters') }}</h3>
                    <button class="filters-toggle d-lg-none" type="button">
                        <i class="icon-filter"></i>
                        {{ trans('product.filters') }}
                    </button>
                </div>
                
                <div class="filters-container">
                    {# Categories Filter #}
                    {% if store.categories %}
                    <div class="filter-group">
                        <h4 class="filter-title">{{ trans('common.categories') }}</h4>
                        <div class="filter-content">
                            <ul class="category-filter-list">
                                {% for cat in store.categories %}
                                    <li class="category-filter-item">
                                        <a href="{{ cat.url }}" class="category-filter-link {{ category and category.id == cat.id ? 'active' : '' }}">
                                            {{ cat.name }}
                                            <span class="category-count">({{ cat.products_count }})</span>
                                        </a>
                                        {% if cat.children %}
                                            <ul class="subcategory-list">
                                                {% for subcat in cat.children %}
                                                    <li>
                                                        <a href="{{ subcat.url }}" class="subcategory-link {{ category and category.id == subcat.id ? 'active' : '' }}">
                                                            {{ subcat.name }}
                                                            <span class="category-count">({{ subcat.products_count }})</span>
                                                        </a>
                                                    </li>
                                                {% endfor %}
                                            </ul>
                                        {% endif %}
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                    </div>
                    {% endif %}
                    
                    {# Price Filter #}
                    <div class="filter-group">
                        <h4 class="filter-title">{{ trans('product.price_range') }}</h4>
                        <div class="filter-content">
                            <div class="price-filter">
                                <div class="price-inputs">
                                    <div class="price-input-group">
                                        <label for="min-price">{{ trans('product.min_price') }}</label>
                                        <input type="number" id="min-price" name="min_price" class="price-input" placeholder="0" min="0">
                                    </div>
                                    <div class="price-input-group">
                                        <label for="max-price">{{ trans('product.max_price') }}</label>
                                        <input type="number" id="max-price" name="max_price" class="price-input" placeholder="1000" min="0">
                                    </div>
                                </div>
                                <button type="button" class="apply-price-filter btn btn-primary btn-small">
                                    {{ trans('common.apply') }}
                                </button>
                            </div>
                            
                            {# Quick Price Ranges #}
                            <div class="price-ranges">
                                <button type="button" class="price-range-btn" data-min="0" data-max="50">
                                    $0 - $50
                                </button>
                                <button type="button" class="price-range-btn" data-min="50" data-max="100">
                                    $50 - $100
                                </button>
                                <button type="button" class="price-range-btn" data-min="100" data-max="200">
                                    $100 - $200
                                </button>
                                <button type="button" class="price-range-btn" data-min="200" data-max="500">
                                    $200 - $500
                                </button>
                                <button type="button" class="price-range-btn" data-min="500" data-max="">
                                    $500+
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    {# Brand Filter #}
                    {% if brands %}
                    <div class="filter-group">
                        <h4 class="filter-title">{{ trans('product.brands') }}</h4>
                        <div class="filter-content">
                            <div class="brand-filter">
                                {% for brand in brands %}
                                    <label class="brand-checkbox">
                                        <input type="checkbox" name="brands[]" value="{{ brand.id }}">
                                        <span class="checkmark"></span>
                                        {{ brand.name }}
                                        <span class="brand-count">({{ brand.products_count }})</span>
                                    </label>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    
                    {# Rating Filter #}
                    <div class="filter-group">
                        <h4 class="filter-title">{{ trans('product.customer_rating') }}</h4>
                        <div class="filter-content">
                            <div class="rating-filter">
                                {% for rating in 5..1 %}
                                    <label class="rating-checkbox">
                                        <input type="checkbox" name="ratings[]" value="{{ rating }}">
                                        <span class="checkmark"></span>
                                        <div class="rating-stars">
                                            {% for i in 1..5 %}
                                                <i class="icon-star {{ i <= rating ? 'filled' : 'empty' }}"></i>
                                            {% endfor %}
                                        </div>
                                        <span class="rating-text">{{ trans('product.and_up') }}</span>
                                    </label>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    
                    {# Availability Filter #}
                    <div class="filter-group">
                        <h4 class="filter-title">{{ trans('product.availability') }}</h4>
                        <div class="filter-content">
                            <label class="availability-checkbox">
                                <input type="checkbox" name="in_stock" value="1">
                                <span class="checkmark"></span>
                                {{ trans('product.in_stock_only') }}
                            </label>
                            <label class="availability-checkbox">
                                <input type="checkbox" name="on_sale" value="1">
                                <span class="checkmark"></span>
                                {{ trans('product.on_sale') }}
                            </label>
                        </div>
                    </div>
                    
                    {# Clear Filters #}
                    <div class="filter-actions">
                        <button type="button" class="clear-filters btn btn-secondary btn-small">
                            <i class="icon-x"></i>
                            {{ trans('product.clear_filters') }}
                        </button>
                    </div>
                </div>
            </aside>
            
            {# Main Products Area #}
            <main class="products-main">
                {# Toolbar #}
                <div class="products-toolbar">
                    <div class="toolbar-left">
                        <button class="mobile-filters-toggle d-lg-none" type="button">
                            <i class="icon-filter"></i>
                            {{ trans('product.filters') }}
                        </button>
                        
                        <div class="view-mode-toggle">
                            <button class="view-mode-btn active" data-view="grid" title="{{ trans('product.grid_view') }}">
                                <i class="icon-grid"></i>
                            </button>
                            <button class="view-mode-btn" data-view="list" title="{{ trans('product.list_view') }}">
                                <i class="icon-list"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="toolbar-right">
                        <div class="products-per-page">
                            <label for="per-page">{{ trans('product.show') }}:</label>
                            <select id="per-page" name="per_page" class="per-page-select">
                                <option value="12" {{ app.request.get('per_page') == '12' ? 'selected' : '' }}>12</option>
                                <option value="24" {{ app.request.get('per_page') == '24' ? 'selected' : '' }}>24</option>
                                <option value="36" {{ app.request.get('per_page') == '36' ? 'selected' : '' }}>36</option>
                                <option value="48" {{ app.request.get('per_page') == '48' ? 'selected' : '' }}>48</option>
                            </select>
                        </div>
                        
                        <div class="sort-dropdown">
                            <label for="sort-by">{{ trans('product.sort_by') }}:</label>
                            <select id="sort-by" name="sort" class="sort-select">
                                <option value="default" {{ app.request.get('sort') == 'default' ? 'selected' : '' }}>
                                    {{ trans('product.sort_default') }}
                                </option>
                                <option value="name_asc" {{ app.request.get('sort') == 'name_asc' ? 'selected' : '' }}>
                                    {{ trans('product.sort_name_asc') }}
                                </option>
                                <option value="name_desc" {{ app.request.get('sort') == 'name_desc' ? 'selected' : '' }}>
                                    {{ trans('product.sort_name_desc') }}
                                </option>
                                <option value="price_asc" {{ app.request.get('sort') == 'price_asc' ? 'selected' : '' }}>
                                    {{ trans('product.sort_price_asc') }}
                                </option>
                                <option value="price_desc" {{ app.request.get('sort') == 'price_desc' ? 'selected' : '' }}>
                                    {{ trans('product.sort_price_desc') }}
                                </option>
                                <option value="rating" {{ app.request.get('sort') == 'rating' ? 'selected' : '' }}>
                                    {{ trans('product.sort_rating') }}
                                </option>
                                <option value="newest" {{ app.request.get('sort') == 'newest' ? 'selected' : '' }}>
                                    {{ trans('product.sort_newest') }}
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
                
                {# Active Filters #}
                <div class="active-filters" id="active-filters">
                    {# Active filters will be populated by JavaScript #}
                </div>
                
                {# Products Grid #}
                <div class="products-container">
                    {% if products and products.data %}
                        <div class="products-grid" id="products-grid">
                            {% for product in products.data %}
                                {% include 'partials.product.card' with {'product': product} %}
                            {% endfor %}
                        </div>
                        
                        {# Pagination #}
                        {% if products.last_page > 1 %}
                            <nav class="pagination-nav" aria-label="Products pagination">
                                <div class="pagination-info">
                                    {{ trans('product.showing_results', {
                                        'from': products.from,
                                        'to': products.to,
                                        'total': products.total
                                    }) }}
                                </div>
                                
                                <ul class="pagination">
                                    {# Previous Page #}
                                    {% if products.prev_page_url %}
                                        <li class="page-item">
                                            <a href="{{ products.prev_page_url }}" class="page-link" rel="prev">
                                                <i class="icon-chevron-left"></i>
                                                {{ trans('common.previous') }}
                                            </a>
                                        </li>
                                    {% endif %}
                                    
                                    {# Page Numbers #}
                                    {% for page in products.links %}
                                        {% if page.url %}
                                            <li class="page-item {{ page.active ? 'active' : '' }}">
                                                <a href="{{ page.url }}" class="page-link">{{ page.label }}</a>
                                            </li>
                                        {% else %}
                                            <li class="page-item disabled">
                                                <span class="page-link">{{ page.label }}</span>
                                            </li>
                                        {% endif %}
                                    {% endfor %}
                                    
                                    {# Next Page #}
                                    {% if products.next_page_url %}
                                        <li class="page-item">
                                            <a href="{{ products.next_page_url }}" class="page-link" rel="next">
                                                {{ trans('common.next') }}
                                                <i class="icon-chevron-right"></i>
                                            </a>
                                        </li>
                                    {% endif %}
                                </ul>
                            </nav>
                        {% endif %}
                    {% else %}
                        {# No Products Found #}
                        <div class="no-products">
                            <div class="no-products-icon">
                                <i class="icon-search"></i>
                            </div>
                            <h3 class="no-products-title">{{ trans('product.no_products_found') }}</h3>
                            <p class="no-products-text">{{ trans('product.no_products_description') }}</p>
                            <div class="no-products-actions">
                                <a href="{{ store.url }}" class="btn btn-primary">
                                    {{ trans('common.back_to_home') }}
                                </a>
                                <button type="button" class="btn btn-secondary clear-filters">
                                    {{ trans('product.clear_filters') }}
                                </button>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </main>
        </div>
    </div>
</section>

{# Mobile Filters Overlay #}
<div class="mobile-filters-overlay d-lg-none">
    <div class="mobile-filters-content">
        <div class="mobile-filters-header">
            <h3>{{ trans('product.filters') }}</h3>
            <button class="mobile-filters-close" type="button">
                <i class="icon-x"></i>
            </button>
        </div>
        <div class="mobile-filters-body">
            {# Filters content will be cloned here on mobile #}
        </div>
        <div class="mobile-filters-footer">
            <button type="button" class="btn btn-secondary clear-filters">
                {{ trans('product.clear_filters') }}
            </button>
            <button type="button" class="btn btn-primary apply-filters">
                {{ trans('common.apply') }}
            </button>
        </div>
    </div>
</div>

{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ 'assets/styles/components.css'|asset }}">
<style>
/* Product Listing Page Styles */

.page-header {
    background: var(--background-light);
    padding: 2rem 0;
    border-bottom: 1px solid var(--border-color);
}

.breadcrumbs {
    margin-bottom: 1.5rem;
}

.breadcrumb-list {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    list-style: none;
    margin: 0;
    padding: 0;
    font-size: 0.875rem;
}

.breadcrumb-item {
    display: flex;
    align-items: center;
}

.breadcrumb-item:not(:last-child)::after {
    content: '/';
    margin-left: 0.5rem;
    color: var(--text-muted);
}

.breadcrumb-item a {
    color: var(--text-light);
    text-decoration: none;
    transition: var(--transition);
}

.breadcrumb-item a:hover {
    color: var(--primary-color);
}

.breadcrumb-item.active {
    color: var(--text-color);
    font-weight: var(--font-weight-medium);
}

.page-title {
    font-size: 2.5rem;
    font-weight: var(--font-weight-bold);
    margin-bottom: 0.5rem;
    color: var(--text-color);
}

.page-description {
    font-size: 1.125rem;
    color: var(--text-light);
    margin-bottom: 1rem;
    line-height: 1.6;
}

.products-count {
    color: var(--text-muted);
    font-size: 0.875rem;
}

.products-section {
    padding: 3rem 0;
}

.products-layout {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: 3rem;
}

/* Sidebar Styles */
.products-sidebar {
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-light);
    padding: 2rem;
    height: fit-content;
    position: sticky;
    top: 100px;
}

.sidebar-header {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
}

.sidebar-title {
    font-size: 1.25rem;
    font-weight: var(--font-weight-semibold);
    color: var(--text-color);
}

.filters-toggle {
    display: none;
    background: none;
    border: none;
    color: var(--primary-color);
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    gap: 0.5rem;
    align-items: center;
}

.filter-group {
    margin-bottom: 2rem;
}

.filter-group:last-child {
    margin-bottom: 0;
}

.filter-title {
    font-size: 1rem;
    font-weight: var(--font-weight-semibold);
    margin-bottom: 1rem;
    color: var(--text-color);
}

.filter-content {
    padding-left: 0.5rem;
}

/* Category Filter */
.category-filter-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

.category-filter-item {
    margin-bottom: 0.5rem;
}

.category-filter-link,
.subcategory-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    color: var(--text-color);
    text-decoration: none;
    transition: var(--transition);
    font-size: 0.875rem;
}

.category-filter-link:hover,
.subcategory-link:hover {
    color: var(--primary-color);
}

.category-filter-link.active,
.subcategory-link.active {
    color: var(--primary-color);
    font-weight: var(--font-weight-medium);
}

.category-count {
    color: var(--text-muted);
    font-size: 0.75rem;
}

.subcategory-list {
    list-style: none;
    margin: 0.5rem 0 0 1rem;
    padding: 0;
}

/* Price Filter */
.price-filter {
    margin-bottom: 1rem;
}

.price-inputs {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.price-input-group label {
    display: block;
    font-size: 0.75rem;
    color: var(--text-light);
    margin-bottom: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.price-input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-small);
    font-size: 0.875rem;
}

.price-input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.price-ranges {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.price-range-btn {
    background: none;
    border: 1px solid var(--border-color);
    padding: 0.5rem;
    border-radius: var(--border-radius-small);
    font-size: 0.875rem;
    cursor: pointer;
    transition: var(--transition);
    text-align: left;
}

.price-range-btn:hover,
.price-range-btn.active {
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

/* Checkbox Styles */
.brand-checkbox,
.rating-checkbox,
.availability-checkbox {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    cursor: pointer;
    font-size: 0.875rem;
    position: relative;
}

.brand-checkbox input,
.rating-checkbox input,
.availability-checkbox input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
}

.checkmark {
    width: 16px;
    height: 16px;
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius-small);
    transition: var(--transition);
    position: relative;
    flex-shrink: 0;
}

.brand-checkbox input:checked ~ .checkmark,
.rating-checkbox input:checked ~ .checkmark,
.availability-checkbox input:checked ~ .checkmark {
    background: var(--primary-color);
    border-color: var(--primary-color);
}

.checkmark::after {
    content: '';
    position: absolute;
    display: none;
    left: 4px;
    top: 1px;
    width: 4px;
    height: 8px;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
}

.brand-checkbox input:checked ~ .checkmark::after,
.rating-checkbox input:checked ~ .checkmark::after,
.availability-checkbox input:checked ~ .checkmark::after {
    display: block;
}

.brand-count {
    margin-left: auto;
    color: var(--text-muted);
    font-size: 0.75rem;
}

.rating-stars {
    display: flex;
    gap: 0.125rem;
}

.rating-stars .filled {
    color: #ffc107;
}

.rating-stars .empty {
    color: #e0e0e0;
}

.rating-text {
    font-size: 0.75rem;
    color: var(--text-light);
}

/* Filter Actions */
.filter-actions {
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color);
}

/* Products Main */
.products-main {
    min-height: 600px;
}

/* Toolbar */
.products-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 1rem;
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-light);
}

.toolbar-left,
.toolbar-right {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.mobile-filters-toggle {
    display: none;
    background: none;
    border: none;
    color: var(--primary-color);
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    gap: 0.5rem;
    align-items: center;
}

.view-mode-toggle {
    display: flex;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-small);
    overflow: hidden;
}

.view-mode-btn {
    padding: 0.5rem;
    background: white;
    border: none;
    cursor: pointer;
    transition: var(--transition);
    color: var(--text-color);
}

.view-mode-btn.active,
.view-mode-btn:hover {
    background: var(--primary-color);
    color: white;
}

.products-per-page,
.sort-dropdown {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
}

.per-page-select,
.sort-select {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-small);
    background: white;
    cursor: pointer;
}

/* Active Filters */
.active-filters {
    margin-bottom: 2rem;
    display: none;
}

.active-filters.has-filters {
    display: block;
}

.active-filter {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--primary-color);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: var(--border-radius-large);
    font-size: 0.875rem;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

.active-filter-remove {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0;
    font-size: 1rem;
}

/* Products Grid */
.products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
}

.products-grid.list-view {
    grid-template-columns: 1fr;
}

.products-grid.list-view .product-card {
    display: flex;
    flex-direction: row;
    max-width: none;
}

.products-grid.list-view .product-image-container {
    width: 200px;
    flex-shrink: 0;
}

.products-grid.list-view .product-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

/* No Products */
.no-products {
    text-align: center;
    padding: 4rem 2rem;
}

.no-products-icon {
    font-size: 4rem;
    color: var(--text-muted);
    margin-bottom: 2rem;
}

.no-products-title {
    font-size: 1.5rem;
    font-weight: var(--font-weight-semibold);
    margin-bottom: 1rem;
    color: var(--text-color);
}

.no-products-text {
    color: var(--text-light);
    margin-bottom: 2rem;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
}

.no-products-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
}

/* Pagination */
.pagination-nav {
    margin-top: 3rem;
    text-align: center;
}

.pagination-info {
    margin-bottom: 1rem;
    color: var(--text-light);
    font-size: 0.875rem;
}

.pagination {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    list-style: none;
    margin: 0;
    padding: 0;
}

.page-item {
    display: flex;
}

.page-link {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 40px;
    height: 40px;
    padding: 0.5rem;
    color: var(--text-color);
    text-decoration: none;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-small);
    transition: var(--transition);
    gap: 0.25rem;
}

.page-link:hover {
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

.page-item.active .page-link {
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

.page-item.disabled .page-link {
    color: var(--text-muted);
    cursor: not-allowed;
}

/* Mobile Filters Overlay */
.mobile-filters-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: var(--transition);
}

.mobile-filters-overlay.active {
    opacity: 1;
    visibility: visible;
}

.mobile-filters-content {
    position: absolute;
    top: 0;
    right: 0;
    width: 320px;
    height: 100%;
    background: white;
    transform: translateX(100%);
    transition: var(--transition);
    display: flex;
    flex-direction: column;
}

.mobile-filters-overlay.active .mobile-filters-content {
    transform: translateX(0);
}

.mobile-filters-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.mobile-filters-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-color);
}

.mobile-filters-body {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
}

.mobile-filters-footer {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
    display: flex;
    gap: 1rem;
}

.mobile-filters-footer .btn {
    flex: 1;
}

/* Responsive Design */
@media (max-width: 1024px) {
    .products-layout {
        grid-template-columns: 250px 1fr;
        gap: 2rem;
    }
    
    .products-sidebar {
        padding: 1.5rem;
    }
}

@media (max-width: 768px) {
    .products-layout {
        grid-template-columns: 1fr;
        gap: 0;
    }
    
    .products-sidebar {
        display: none;
    }
    
    .mobile-filters-toggle {
        display: flex;
    }
    
    .products-toolbar {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }
    
    .toolbar-left,
    .toolbar-right {
        justify-content: space-between;
    }
    
    .page-title {
        font-size: 2rem;
    }
    
    .products-grid {
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }
}

@media (max-width: 576px) {
    .page-header {
        padding: 1.5rem 0;
    }
    
    .page-title {
        font-size: 1.75rem;
    }
    
    .products-section {
        padding: 2rem 0;
    }
    
    .products-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .toolbar-left,
    .toolbar-right {
        flex-direction: column;
        align-items: stretch;
        gap: 0.5rem;
    }
    
    .no-products-actions {
        flex-direction: column;
        align-items: center;
    }
    
    .pagination {
        flex-wrap: wrap;
        justify-content: center;
    }
}
</style>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Mobile filters functionality
    const mobileFiltersToggle = document.querySelector('.mobile-filters-toggle');
    const mobileFiltersOverlay = document.querySelector('.mobile-filters-overlay');
    const mobileFiltersClose = document.querySelector('.mobile-filters-close');
    const mobileFiltersBody = document.querySelector('.mobile-filters-body');
    const filtersContainer = document.querySelector('.filters-container');
    
    if (mobileFiltersToggle && mobileFiltersOverlay) {
        mobileFiltersToggle.addEventListener('click', function() {
            // Clone filters to mobile overlay
            mobileFiltersBody.innerHTML = filtersContainer.innerHTML;
            mobileFiltersOverlay.classList.add('active');
            document.body.style.overflow = 'hidden';
        });
        
        mobileFiltersClose.addEventListener('click', function() {
            mobileFiltersOverlay.classList.remove('active');
            document.body.style.overflow = '';
        });
        
        mobileFiltersOverlay.addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
    }
    
    // View mode toggle
    const viewModeButtons = document.querySelectorAll('.view-mode-btn');
    const productsGrid = document.getElementById('products-grid');
    
    viewModeButtons.forEach(button => {
        button.addEventListener('click', function() {
            viewModeButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            const viewMode = this.dataset.view;
            if (viewMode === 'list') {
                productsGrid.classList.add('list-view');
            } else {
                productsGrid.classList.remove('list-view');
            }
        });
    });
    
    // Sort and per page change
    const sortSelect = document.querySelector('.sort-select');
    const perPageSelect = document.querySelector('.per-page-select');
    
    if (sortSelect) {
        sortSelect.addEventListener('change', function() {
            updateURL('sort', this.value);
        });
    }
    
    if (perPageSelect) {
        perPageSelect.addEventListener('change', function() {
            updateURL('per_page', this.value);
        });
    }
    
    // Price filter
    const applyPriceFilter = document.querySelector('.apply-price-filter');
    const priceRangeButtons = document.querySelectorAll('.price-range-btn');
    const minPriceInput = document.getElementById('min-price');
    const maxPriceInput = document.getElementById('max-price');
    
    if (applyPriceFilter) {
        applyPriceFilter.addEventListener('click', function() {
            const minPrice = minPriceInput.value;
            const maxPrice = maxPriceInput.value;
            
            if (minPrice) updateURL('min_price', minPrice);
            if (maxPrice) updateURL('max_price', maxPrice);
            
            if (minPrice || maxPrice) {
                window.location.href = buildURL();
            }
        });
    }
    
    priceRangeButtons.forEach(button => {
        button.addEventListener('click', function() {
            priceRangeButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            const minPrice = this.dataset.min;
            const maxPrice = this.dataset.max;
            
            minPriceInput.value = minPrice;
            maxPriceInput.value = maxPrice;
            
            updateURL('min_price', minPrice);
            if (maxPrice) {
                updateURL('max_price', maxPrice);
            } else {
                removeURLParam('max_price');
            }
            
            window.location.href = buildURL();
        });
    });
    
    // Filter checkboxes
    const filterCheckboxes = document.querySelectorAll('input[type="checkbox"]');
    
    filterCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            updateFilters();
        });
    });
    
    // Clear filters
    const clearFiltersButtons = document.querySelectorAll('.clear-filters');
    
    clearFiltersButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Clear all form inputs
            filterCheckboxes.forEach(cb => cb.checked = false);
            if (minPriceInput) minPriceInput.value = '';
            if (maxPriceInput) maxPriceInput.value = '';
            
            // Clear URL parameters
            const url = new URL(window.location);
            const paramsToKeep = ['page', 'per_page', 'sort'];
            const paramsToRemove = [];
            
            for (const [key] of url.searchParams) {
                if (!paramsToKeep.includes(key)) {
                    paramsToRemove.push(key);
                }
            }
            
            paramsToRemove.forEach(param => url.searchParams.delete(param));
            
            window.location.href = url.toString();
        });
    });
    
    // URL management functions
    let urlParams = new URLSearchParams(window.location.search);
    
    function updateURL(key, value) {
        if (value) {
            urlParams.set(key, value);
        } else {
            urlParams.delete(key);
        }
    }
    
    function removeURLParam(key) {
        urlParams.delete(key);
    }
    
    function buildURL() {
        const baseURL = window.location.pathname;
        return baseURL + '?' + urlParams.toString();
    }
    
    function updateFilters() {
        // Collect all checked filters
        const brands = [];
        const ratings = [];
        
        document.querySelectorAll('input[name="brands[]"]:checked').forEach(cb => {
            brands.push(cb.value);
        });
        
        document.querySelectorAll('input[name="ratings[]"]:checked').forEach(cb => {
            ratings.push(cb.value);
        });
        
        // Update URL parameters
        if (brands.length > 0) {
            updateURL('brands', brands.join(','));
        } else {
            removeURLParam('brands');
        }
        
        if (ratings.length > 0) {
            updateURL('ratings', ratings.join(','));
        } else {
            removeURLParam('ratings');
        }
        
        // Check other filters
        const inStockOnly = document.querySelector('input[name="in_stock"]:checked');
        const onSale = document.querySelector('input[name="on_sale"]:checked');
        
        if (inStockOnly) {
            updateURL('in_stock', '1');
        } else {
            removeURLParam('in_stock');
        }
        
        if (onSale) {
            updateURL('on_sale', '1');
        } else {
            removeURLParam('on_sale');
        }
        
        // Update active filters display
        updateActiveFilters();
        
        // Apply filters (in a real implementation, this would make an AJAX request)
        setTimeout(() => {
            window.location.href = buildURL();
        }, 300);
    }
    
    function updateActiveFilters() {
        const activeFiltersContainer = document.getElementById('active-filters');
        const activeFilters = [];
        
        // Collect active filters
        filterCheckboxes.forEach(checkbox => {
            if (checkbox.checked) {
                const label = checkbox.closest('label').textContent.trim();
                activeFilters.push({
                    label: label,
                    type: checkbox.name,
                    value: checkbox.value
                });
            }
        });
        
        // Add price range if set
        const minPrice = minPriceInput?.value;
        const maxPrice = maxPriceInput?.value;
        
        if (minPrice || maxPrice) {
            const priceLabel = `$${minPrice || '0'} - $${maxPrice || '∞'}`;
            activeFilters.push({
                label: priceLabel,
                type: 'price',
                value: 'price'
            });
        }
        
        // Update display
        if (activeFilters.length > 0) {
            activeFiltersContainer.classList.add('has-filters');
            activeFiltersContainer.innerHTML = activeFilters.map(filter => `
                <span class="active-filter">
                    ${filter.label}
                    <button type="button" class="active-filter-remove" data-type="${filter.type}" data-value="${filter.value}">
                        <i class="icon-x"></i>
                    </button>
                </span>
            `).join('');
            
            // Add remove functionality
            activeFiltersContainer.querySelectorAll('.active-filter-remove').forEach(btn => {
                btn.addEventListener('click', function() {
                    const type = this.dataset.type;
                    const value = this.dataset.value;
                    
                    if (type === 'price') {
                        if (minPriceInput) minPriceInput.value = '';
                        if (maxPriceInput) maxPriceInput.value = '';
                        removeURLParam('min_price');
                        removeURLParam('max_price');
                    } else {
                        const checkbox = document.querySelector(`input[name="${type}"][value="${value}"]`);
                        if (checkbox) checkbox.checked = false;
                    }
                    
                    updateFilters();
                });
            });
        } else {
            activeFiltersContainer.classList.remove('has-filters');
            activeFiltersContainer.innerHTML = '';
        }
    }
    
    // Initialize active filters on page load
    updateActiveFilters();
});
</script>
{% endblock %}

