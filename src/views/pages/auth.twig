{# Login/Register Page for Gadgets Zone Theme #}

{% extends "layouts.master" %}

{% block title %}{{ trans("auth.login_register") }} - {{ store.name }}{% endblock %}

{% block description %}{{ trans("auth.login_register_description") }}{% endblock %}

{% block body_class %}auth-page{% endblock %}

{% block content %}

{# Page Header #}
<section class="page-header">
    <div class="container">
        {# Breadcrumbs #}
        <nav class="breadcrumbs" aria-label="Breadcrumb">
            <ol class="breadcrumb-list">
                <li class="breadcrumb-item">
                    <a href="{{ store.url }}">{{ trans("common.home") }}</a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">
                    {{ trans("auth.login_register") }}
                </li>
            </ol>
        </nav>
        
        {# Page Title #}
        <div class="page-header-content">
            <h1 class="page-title">{{ trans("auth.welcome_back") }}</h1>
            <p class="page-description">{{ trans("auth.login_register_prompt") }}</p>
        </div>
    </div>
</section>

{# Auth Content #}
<section class="auth-section">
    <div class="container">
        <div class="auth-container">
            <div class="auth-tabs">
                <button class="tab-button active" data-tab="login">{{ trans("auth.login") }}</button>
                <button class="tab-button" data-tab="register">{{ trans("auth.register") }}</button>
            </div>
            
            {# Login Form #}
            <div class="auth-form-content active" data-tab-content="login">
                <form id="login-form" class="auth-form">
                    <div class="form-group">
                        <label for="login-email">{{ trans("auth.email_address") }} *</label>
                        <input type="email" id="login-email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="login-password">{{ trans("auth.password") }} *</label>
                        <input type="password" id="login-password" name="password" required>
                    </div>
                    <div class="form-group flex-group">
                        <div class="checkbox-group">
                            <input type="checkbox" id="remember-me" name="remember_me">
                            <label for="remember-me">{{ trans("auth.remember_me") }}</label>
                        </div>
                        <a href="#" class="forgot-password-link">{{ trans("auth.forgot_password") }}?</a>
                    </div>
                    <button type="submit" class="btn btn-primary btn-large auth-submit-btn">
                        {{ trans("auth.login") }}
                    </button>
                </form>
                <div class="social-login">
                    <p>{{ trans("auth.or_login_with") }}</p>
                    <div class="social-buttons">
                        <button class="btn btn-social facebook"><i class="icon-facebook"></i> Facebook</button>
                        <button class="btn btn-social google"><i class="icon-google"></i> Google</button>
                    </div>
                </div>
            </div>
            
            {# Register Form #}
            <div class="auth-form-content" data-tab-content="register">
                <form id="register-form" class="auth-form">
                    <div class="form-group">
                        <label for="register-name">{{ trans("auth.full_name") }} *</label>
                        <input type="text" id="register-name" name="full_name" required>
                    </div>
                    <div class="form-group">
                        <label for="register-email">{{ trans("auth.email_address") }} *</label>
                        <input type="email" id="register-email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="register-password">{{ trans("auth.password") }} *</label>
                        <input type="password" id="register-password" name="password" required>
                    </div>
                    <div class="form-group">
                        <label for="register-confirm-password">{{ trans("auth.confirm_password") }} *</label>
                        <input type="password" id="register-confirm-password" name="confirm_password" required>
                    </div>
                    <div class="form-group checkbox-group">
                        <input type="checkbox" id="agree-terms" name="agree_terms" required>
                        <label for="agree-terms">{{ trans("auth.agree_to") }} <a href="/terms-conditions" target="_blank">{{ trans("common.terms_conditions") }}</a></label>
                    </div>
                    <button type="submit" class="btn btn-primary btn-large auth-submit-btn">
                        {{ trans("auth.register") }}
                    </button>
                </form>
                <div class="social-login">
                    <p>{{ trans("auth.or_register_with") }}</p>
                    <div class="social-buttons">
                        <button class="btn btn-social facebook"><i class="icon-facebook"></i> Facebook</button>
                        <button class="btn btn-social google"><i class="icon-google"></i> Google</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ "assets/styles/components.css"|asset }}">
<style>
/* Auth Page Styles */

.auth-section {
    padding: 3rem 0;
}

.auth-container {
    max-width: 500px;
    margin: 0 auto;
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-light);
    padding: 2.5rem;
}

.auth-tabs {
    display: flex;
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--border-color);
}

.tab-button {
    flex: 1;
    padding: 1rem;
    background: none;
    border: none;
    font-size: 1.125rem;
    font-weight: var(--font-weight-semibold);
    color: var(--text-light);
    cursor: pointer;
    transition: var(--transition);
    position: relative;
}

.tab-button.active {
    color: var(--primary-color);
}

.tab-button::after {
    content: ";
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--primary-color);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.tab-button.active::after {
    transform: scaleX(1);
}

.auth-form-content {
    display: none;
}

.auth-form-content.active {
    display: block;
}

.auth-form .form-group {
    margin-bottom: 1.5rem;
}

.auth-form .form-group label {
    display: block;
    font-weight: var(--font-weight-medium);
    margin-bottom: 0.5rem;
    color: var(--text-color);
}

.auth-form .form-group input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    font-size: 1rem;
    transition: var(--transition);
}

.auth-form .form-group input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.auth-form .form-group.flex-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.auth-form .checkbox-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.auth-form .checkbox-group input[type="checkbox"] {
    width: auto;
    margin: 0;
}

.auth-form .checkbox-group label {
    margin: 0;
    font-weight: normal;
}

.forgot-password-link {
    color: var(--primary-color);
    text-decoration: none;
    font-size: 0.9rem;
    transition: var(--transition);
}

.forgot-password-link:hover {
    text-decoration: underline;
}

.auth-submit-btn {
    width: 100%;
    margin-top: 1rem;
}

.social-login {
    text-align: center;
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-color);
}

.social-login p {
    color: var(--text-light);
    margin-bottom: 1.5rem;
    position: relative;
}

.social-login p::before {
    content: ";
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 0 10px;
    z-index: 1;
}

.social-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.btn-social {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    background: white;
    color: var(--text-color);
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    transition: var(--transition);
}

.btn-social:hover {
    box-shadow: var(--shadow-light);
}

.btn-social.facebook {
    color: #1877f2;
    border-color: #1877f2;
}

.btn-social.facebook:hover {
    background: #1877f2;
    color: white;
}

.btn-social.google {
    color: #ea4335;
    border-color: #ea4335;
}

.btn-social.google:hover {
    background: #ea4335;
    color: white;
}

/* Responsive Design */
@media (max-width: 768px) {
    .auth-container {
        padding: 1.5rem;
    }
    
    .auth-tabs {
        flex-direction: column;
    }
    
    .tab-button {
        border-bottom: 1px solid var(--border-color);
    }
    
    .tab-button:last-child {
        border-bottom: none;
    }
    
    .social-buttons {
        flex-direction: column;
    }
}

@media (max-width: 576px) {
    .auth-section {
        padding: 2rem 0;
    }
    
    .auth-container {
        padding: 1rem;
    }
}
</style>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const tabButtons = document.querySelectorAll(".tab-button");
    const tabContents = document.querySelectorAll(".auth-form-content");
    const loginForm = document.getElementById("login-form");
    const registerForm = document.getElementById("register-form");

    tabButtons.forEach(button => {
        button.addEventListener("click", function() {
            const tab = this.dataset.tab;

            tabButtons.forEach(btn => btn.classList.remove("active"));
            this.classList.add("active");

            tabContents.forEach(content => {
                content.classList.remove("active");
                if (content.dataset.tabContent === tab) {
                    content.classList.add("active");
                }
            });
        });
    });

    // Form submission (simulated)
    if (loginForm) {
        loginForm.addEventListener("submit", function(e) {
            e.preventDefault();
            const email = this.querySelector("#login-email").value;
            const password = this.querySelector("#login-password").value;

            if (!email || !password) {
                GadgetsZone.showNotification(GadgetsZone.trans("auth.fill_all_fields"), "error");
                return;
            }

            const submitBtn = this.querySelector(".auth-submit-btn");
            const originalText = submitBtn.textContent;
            submitBtn.textContent = GadgetsZone.trans("auth.logging_in") + "...";
            submitBtn.disabled = true;

            setTimeout(() => {
                if (email === "test@example.com" && password === "password") {
                    GadgetsZone.showNotification(GadgetsZone.trans("auth.login_success"), "success");
                    window.location.href = "/customer/profile"; // Redirect to account page
                } else {
                    GadgetsZone.showNotification(GadgetsZone.trans("auth.invalid_credentials"), "error");
                }
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }, 1500);
        });
    }

    if (registerForm) {
        registerForm.addEventListener("submit", function(e) {
            e.preventDefault();
            const fullName = this.querySelector("#register-name").value;
            const email = this.querySelector("#register-email").value;
            const password = this.querySelector("#register-password").value;
            const confirmPassword = this.querySelector("#register-confirm-password").value;
            const agreeTerms = this.querySelector("#agree-terms").checked;

            if (!fullName || !email || !password || !confirmPassword) {
                GadgetsZone.showNotification(GadgetsZone.trans("auth.fill_all_fields"), "error");
                return;
            }

            if (password !== confirmPassword) {
                GadgetsZone.showNotification(GadgetsZone.trans("auth.passwords_not_match"), "error");
                return;
            }

            if (!agreeTerms) {
                GadgetsZone.showNotification(GadgetsZone.trans("auth.agree_terms_required"), "error");
                return;
            }

            const submitBtn = this.querySelector(".auth-submit-btn");
            const originalText = submitBtn.textContent;
            submitBtn.textContent = GadgetsZone.trans("auth.registering") + "...";
            submitBtn.disabled = true;

            setTimeout(() => {
                GadgetsZone.showNotification(GadgetsZone.trans("auth.registration_success"), "success");
                window.location.href = "/customer/profile"; // Redirect to account page
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }, 1500);
        });
    }

    // Placeholder for GadgetsZone.trans and GadgetsZone.showNotification if not already defined
    if (typeof GadgetsZone === "undefined") {
        window.GadgetsZone = {
            showNotification: function(message, type = "success") {
                console.log(`Notification (${type}): ${message}`);
                const notification = document.createElement("div");
                notification.className = `cart-notification show ${type}`;
                notification.innerHTML = `
                    <div class="notification-content">
                        <i class="notification-icon icon-${type === "error" ? "x-circle" : "check-circle"}"></i>
                        <span class="notification-message">${message}</span>
                    </div>
                `;
                document.body.appendChild(notification);
                setTimeout(() => {
                    notification.classList.remove("show");
                    notification.addEventListener("transitionend", () => notification.remove());
                }, 3000);
            },
            trans: function(key, params = {}) {
                const translations = {
                    "auth.login_register": "Login / Register",
                    "auth.login_register_description": "Access your account or create a new one.",
                    "auth.welcome_back": "Welcome Back!",
                    "auth.login_register_prompt": "Login to your account or create a new one to enjoy exclusive features.",
                    "auth.login": "Login",
                    "auth.register": "Register",
                    "auth.email_address": "Email Address",
                    "auth.password": "Password",
                    "auth.remember_me": "Remember me",
                    "auth.forgot_password": "Forgot Password",
                    "auth.or_login_with": "Or login with",
                    "auth.full_name": "Full Name",
                    "auth.confirm_password": "Confirm Password",
                    "auth.agree_to": "I agree to the",
                    "auth.or_register_with": "Or register with",
                    "auth.fill_all_fields": "Please fill in all required fields.",
                    "auth.logging_in": "Logging In",
                    "auth.login_success": "Login successful! Redirecting...",
                    "auth.invalid_credentials": "Invalid email or password.",
                    "auth.passwords_not_match": "Passwords do not match.",
                    "auth.agree_terms_required": "You must agree to the terms and conditions.",
                    "auth.registering": "Registering",
                    "auth.registration_success": "Registration successful! Redirecting...",
                    "common.home": "Home",
                    "common.terms_conditions": "Terms & Conditions"
                };
                let translated = translations[key] || key;
                for (const param in params) {
                    translated = translated.replace(`{${param}}`, params[param]);
                }
                return translated;
            }
        };
    }
});
</script>
{% endblock %}

